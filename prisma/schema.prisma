generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  name        String
  email       String   @unique
  password    String
  phoneNumber String?
  interest    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  cash        Int      @default(1000000) // 디폴트 값 100만
  Order       Order[]

  @@map("User")
}

model Partner {
  id          Int         @id @default(autoincrement())
  name        String
  email       String      @unique
  password    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  cash        Int         @default(10000)
  phoneNumber String?
  Restaurant  Restaurant?
  Comment     Comment[]

  @@map("Partner")
}

model Restaurant {
  id             Int     @id @default(autoincrement())
  partnerId      Int     @unique
  restaurantName String  @unique
  keyword        String?
  starRating     Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  businessNumber String?  @unique
  number         String?
  Cart           Cart[]
  Menu           Menu[]
  Review         Review[]
  Partner        Partner  @relation(fields: [partnerId], references: [id])

  @@map("Restaurant")
}

model Menu {
  id           Int        @id @default(autoincrement())
  restaurantId Int
  name         String
  price        Int
  spicyLevel   Int?
  Restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  MenuCart     MenuCart[]

  @@index([restaurantId], map: "Menu_restaurantId_fkey")
  @@map("Menu")
}

model Cart {
  id           Int        @id @default(autoincrement())
  userId       Int
  restaurantId Int
  createdAt    DateTime   @default(now())
  menuInfo     Json
  Restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  MenuCart     MenuCart[]
  Order        Order?

  @@index([restaurantId], map: "Cart_restaurantId_fkey")
  @@map("Cart")
}

model Order {
  id        Int      @id @default(autoincrement())
  userId    Int
  cartId    Int      @unique
  priceSum  Int
  status    String
  menuName  Json
  createdAt DateTime @default(now())
  Cart      Cart     @relation(fields: [cartId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
  Payment   Payment?
  Review    Review?

  @@index([userId], map: "Order_userId_fkey")
  @@map("Order")
}

model Payment {
  id        Int      @id @default(autoincrement())
  orderId   Int      @unique
  createdAt DateTime @default(now())
  method    String
  Order     Order    @relation(fields: [orderId], references: [id])

  @@map("Payment")
}

model Review {
  id           Int      @id @default(autoincrement())
  userId       Int
  restaurantId Int
  orderId      Int        @unique
  image        String?
  content      String?
  starRating   Int
  createdAt    DateTime   @default(now())
  Order        Order      @relation(fields: [orderId], references: [id])
  Restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  Comment      Comment[]

  @@unique([userId, restaurantId])
  @@map("Review")
}

model Comment {
  id        Int      @id @default(autoincrement())
  partnerId Int
  reviewId  Int      @unique
  comment   String
  createdAt DateTime @default(now())
  Partner   Partner  @relation(fields: [partnerId], references: [id])
  Review    Review   @relation(fields: [reviewId], references: [id])

  @@map("Comment")
}

model MenuCart {
  id     Int  @id @default(autoincrement())
  menuId Int
  cartId Int
  Cart   Cart @relation(fields: [cartId], references: [id])
  Menu   Menu @relation(fields: [menuId], references: [id])

  @@index([cartId], map: "MenuCart_cartId_fkey")
  @@index([menuId], map: "MenuCart_menuId_fkey")
  @@map("MenuCart")
}
